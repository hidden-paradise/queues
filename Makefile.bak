NAMESPACE = queues-learning
REGISTRY_PORT = 30005



.PHONY: all create-namespace deploy-registry deploy-deps build-images push-images deploy-producer deploy-consumer deploy

all: deploy

## Создаем namespace
create-namespace:
	kubectl create namespace $(NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -

deploy-registry: create-namespace
	helm repo add twuni https://helm.twun.io
	helm repo update
	helm upgrade --install registry twuni/docker-registry \
		--namespace $(NAMESPACE) \
		--set service.type=NodePort \
		--set service.nodePort=$(REGISTRY_PORT) \
		--set persistence.enabled=false
	$(eval REGISTRY_IP := $(shell kubectl get nodes -o jsonpath='{range .items[*].status.addresses[*]}{@.address}{"\n"}{end}' | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1))
	@echo "Detected REGISTRY_IP: $(REGISTRY_IP)"

deploy-deps: create-namespace
	helm repo add bitnami https://charts.bitnami.com/bitnami
	helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
	helm repo add grafana https://grafana.github.io/helm-charts
	helm repo update

	helm upgrade --install redis bitnami/redis \
		--namespace $(NAMESPACE) \
		--set auth.enabled=false

	helm upgrade --install prometheus prometheus-community/prometheus \
		--namespace $(NAMESPACE)

	helm upgrade --install grafana grafana/grafana \
		--namespace $(NAMESPACE) \
		--set adminPassword=admin

build-images:
	docker build -t localhost:$(REGISTRY_PORT)/producer:latest --file ./producer/Dockerfile .
	docker build -t localhost:$(REGISTRY_PORT)/consumer:latest --file ./consumer/Dockerfile .

push-images:
	docker push localhost:$(REGISTRY_PORT)/producer:latest
	docker push localhost:$(REGISTRY_PORT)/consumer:latest

deploy-producer:
	helm upgrade --install producer ./helm/producer \
      --namespace queues-learning \
      --set image.repository=$(REGISTRY_IP):$(REGISTRY_PORT)/producer \
      --set image.tag=latest

deploy-consumer:
	helm upgrade --install consumer ./helm/consumer \
      --namespace queues-learning \
      --set image.repository=$(REGISTRY_IP):$(REGISTRY_PORT)/consumer \
      --set image.tag=latest

deploy: deploy-registry deploy-deps build-images push-images deploy-producer deploy-consumer